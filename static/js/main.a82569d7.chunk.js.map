{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchchange","className","type","placeholder","onChange","Scroll","props","style","overflow","border","height","marginTop","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onsearchchange","event","searchfield","target","value","fetch","then","response","json","users","filteredrobots","filter","robot","name","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"0OAqBeA,EAlBE,SAAC,GAAe,EAAbC,OAEhB,MAAM,IAAIC,MAAM,uDCWLC,EAdG,SAAC,GAEZ,IADLC,EACI,EADJA,aAEA,OAAS,2BACDC,UAAY,mCAClBC,KAAO,SACPC,YAAc,gBACdC,SACEJ,KCOSK,G,MAfA,SAACC,GACd,OACE,yBACEC,MAAO,CACLC,SAAU,OACVC,OAAQ,kBACRC,OAAQ,QACRC,UAAW,SAGZL,EAAMM,YCUEC,E,kDAnBb,WAAYP,GAAQ,IAAD,8BACjB,gBACKQ,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,wDAEFG,KAAKZ,MAAMM,a,GAhBMQ,aC+CbC,E,kDAvCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAb1C,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKZ,SAAS,CAAEtB,OAAQkC,S,+BAOnC,IAAD,EACyBb,KAAKJ,MAA7BjB,EADD,EACCA,OAAQ2B,EADT,EACSA,YAEVQ,EAAiBnC,EAAOoC,QAAO,SAACC,GACpC,OAAOA,EAAMC,KAAKC,cAAcC,SAASb,EAAYY,kBAGvD,OACE,yBAAKnC,UAAU,MACb,wBAAIA,UAAU,IAAd,iBACA,kBAAC,EAAD,CAAWD,aAAckB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUzB,OAAQmC,W,GAhCZZ,aCHlBkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a82569d7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  if (true) {\r\n    throw new Error(\"this is for creating error to check error boundary\");\r\n  }\r\n  const CardArray = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div>{CardArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({\r\n  searchchange\r\n}) => {\r\n  return ( <\r\n    input className = \"pa3 ba b--green bg-lightest-blue\"\r\n    type = \"search\"\r\n    placeholder = \"Search robots\"\r\n    onChange = {\r\n      searchchange\r\n    } //!predefined method onChange\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflow: \"auto\",\r\n        border: \"2px solid white\",\r\n        height: \"800px\",\r\n        marginTop: \"10px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1> Opps! the page Breaked </h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\n\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary.js\";\r\n\r\n//! For creating STATE\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ robots: users }));\r\n  }\r\n\r\n  onsearchchange = (event) => {\r\n    this.setState({ searchfield: event.target.value }); //! to change anything in state use .setState()\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n\r\n    const filteredrobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"\"> RoboFriends </h1>\r\n        <SearchBox searchchange={this.onsearchchange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredrobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}